#!/usr/bin/perl -w
#
# This is the basis of an application with signal handlers
#
# You can safely edit this file, any changes that you make will be preserved
# and this file will not be overwritten by the next run of Glade::PerlGenerate
#
#==============================================================================
#=== This is the 'BusFrame' UI construction class                              
#==============================================================================
package BusFrame;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'BusFrame' (version 0.01)
# 
# Copyright (c) Date   Fri Feb 18 02:22:11 GMT 2000
#               Author Dermot Musgrove <dermot.musgrove\@virgin.net>
#
# This library is released under the same conditions as Perl, that
# is, either of the following:
#
# a) the GNU General Public License as published by the Free
# Software Foundation; either version 1, or (at your option) any
# later version.
#
# b) the Artistic License.
#
# If you use this library in a commercial enterprise, you are invited,
# but not required, to pay what you feel is a reasonable fee to the
# author  Dermot Musgrove <dermot.musgrove\@virgin.net>
#
#==============================================================================
# This perl source file was automatically generated by Glade::PerlGenerate from
#   Glade file /home/dermot/Devel/Glade-Perl-0.49/Example/Bus/Bus.glade
#   on Date    Fri Feb 18 02:22:11 GMT 2000
#
# Glade::PerlGenerate       - version 0.49
#   Copyright (c) Date   Thu Feb 17 02:46:03 GMT 2000
#                 Author Dermot Musgrove <dermot.musgrove\@virgin.net>
#==============================================================================

BEGIN {
    use Generated::BusUI;
    use Bus_mySUBS;
}

#===============================================================================
#==== Below are signal handlers
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    my $message = 
        __PACKAGE__." (version 0.01 - Fri Feb 18 02:22:11 GMT 2000)\n".
        "Written by         Dermot Musgrove <dermot.musgrove\@virgin.net> \n\n".
        "This is an example generated by the Glade-Perl
source code generator \n\n".
        "Gtk version:        $gtkversion\n".
        "Gtk-Perl version:    $Gtk::VERSION\n".
        "run from file:        $name";
    __PACKAGE__->message_box($message, "About \u".__PACKAGE__, ['Dismiss', 'Quit Program'], 1,
        "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm", 'left' );
}

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
}

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }


#==============================================================================
#=== Below are the signal handlers for 'BusFrame' UI construction class 
#==============================================================================

sub on_Contents_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Contents_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Contents_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Contents_activate


sub on_Copy_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Copy_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Copy_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Copy_activate


sub on_Cut_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Cut_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Cut_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Cut_activate


sub on_Index_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Index_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Index_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Index_activate


sub on_Mail_to_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Mail_to_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Mail_to_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Mail_to_activate


sub on_Paste_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Paste_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Paste_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Paste_activate


sub on_Save_As_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Save_As_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Save_As_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Save_As_activate


sub on_Save_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Save_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Save_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Save_activate


sub on_Search_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Search_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Search_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Search_activate


sub on_Undo_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_Undo_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_Undo_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_Undo_activate


sub on_WWW_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_WWW_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_WWW_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/glade2perl_logo.xpm");

} # End of sub on_WWW_activate











#==============================================================================
#=== This is the 'fileselection1' UI construction class                              
#==============================================================================
package fileselection1;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'fileselection1' (version 0.01)
# 
# Copyright (c) Date   Fri Feb 18 02:22:11 GMT 2000
#               Author Dermot Musgrove <dermot.musgrove\@virgin.net>
#
# This library is released under the same conditions as Perl, that
# is, either of the following:
#
# a) the GNU General Public License as published by the Free
# Software Foundation; either version 1, or (at your option) any
# later version.
#
# b) the Artistic License.
#
# If you use this library in a commercial enterprise, you are invited,
# but not required, to pay what you feel is a reasonable fee to the
# author  Dermot Musgrove <dermot.musgrove\@virgin.net>
#
#==============================================================================
# This perl source file was automatically generated by Glade::PerlGenerate from
#   Glade file /home/dermot/Devel/Glade-Perl-0.49/Example/Bus/Bus.glade
#   on Date    Fri Feb 18 02:22:11 GMT 2000
#
# Glade::PerlGenerate       - version 0.49
#   Copyright (c) Date   Thu Feb 17 02:46:03 GMT 2000
#                 Author Dermot Musgrove <dermot.musgrove\@virgin.net>
#==============================================================================

BEGIN {
    use Generated::BusUI;
    use Bus_mySUBS;
}

#===============================================================================
#==== Below are signal handlers
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    my $message = 
        __PACKAGE__." (version 0.01 - Fri Feb 18 02:22:11 GMT 2000)\n".
        "Written by         Dermot Musgrove <dermot.musgrove\@virgin.net> \n\n".
        "This is an example generated by the Glade-Perl
source code generator \n\n".
        "Gtk version:        $gtkversion\n".
        "Gtk-Perl version:    $Gtk::VERSION\n".
        "run from file:        $name";
    __PACKAGE__->message_box($message, "About \u".__PACKAGE__, ['Dismiss', 'Quit Program'], 1,
        'pixmaps/glade2perl_ogo.xpm', 'left' );
}

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
}

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }


#==============================================================================
#=== Below are the signal handlers for 'fileselection1' UI construction class 
#==============================================================================










1;

__END__

#===============================================================================
#==== Documentation ============================================================
#===============================================================================
=pod

=head1 NAME

Bus - version 0.01 Fri Feb 18 02:22:11 GMT 2000

This is an example generated by the Glade-Perl
source code generator

=head1 SYNOPSIS

 use Bus;

 if ($we_want_to_subclass_this_class) {
   # Inherit the AUTOLOAD dynamic methods from BusFrame
   *AUTOLOAD = \&BusFrame::AUTOLOAD;

   # Tell interpreter who we are inheriting from
   use vars qw( @ISA ); @ISA = qw( BusFrame );
 }
 
 To construct the window object and show it call 
 
 Gtk->init;
 my $window = BusFrame->new;
 $window->TOPLEVEL->show;
 Gtk->main;
 
 OR use the shorthand for the above calls
 
 BusFrame->run;

=head1 DESCRIPTION

Unfortunately, the author has not yet written any documentation :-(

=head1 AUTHOR

Dermot Musgrove <dermot.musgrove\@virgin.net>

=cut
